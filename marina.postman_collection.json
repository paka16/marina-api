{
	"info": {
		"_postman_id": "9fea4eac-e85c-4f19-ab1f-49ae7cc98db7",
		"name": "paka_project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30102247"
	},
	"item": [
		{
			"name": "POST",
			"item": [
				{
					"name": "POST  load",
					"item": [
						{
							"name": "201 - CREATED - LOAD1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Set appropriate environment variable for load id\r",
											"pm.environment.set(\"load_id1\", pm.response.json()[\"id\"]);\r",
											"pm.environment.set(\"req_volume\", pm.response.json()[\"volume\"]);\r",
											"pm.environment.set(\"req_item\", pm.response.json()[\"item\"]);\r",
											"pm.environment.set(\"req_origin\", pm.response.json()[\"origin\"]);\r",
											"pm.environment.set(\"req_carrier\", pm.response.json()[\"carrier\"]);\r",
											"\r",
											"pm.test(\"201 status code\", function () {\r",
											"   //Check if status code is 201\r",
											"   pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"content is valid\", function () {\r",
											"    //Check for appropriate content including self value\r",
											"    pm.expect(pm.response.json()[\"volume\"]).to.eq(5);\r",
											"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");\r",
											"    pm.expect(pm.response.json()[\"origin\"]).to.eq(\"France\");\r",
											"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);\r",
											"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
											"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"origin\": \"France\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Missing Attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 status code\", function () {\r",
											"    //Check for error code 400\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"400 error message\", function () {\r",
											"     //Check for appropriate error message\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.equal(\"INVALID REQUEST: The request object is missing an attribute.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\"\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - CREATED - LOAD2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Set appropriate environment variable for load id\r",
											"pm.environment.set(\"load_id2\", pm.response.json()[\"id\"]);\r",
											"\r",
											"pm.test(\"201 status code\", function () {\r",
											"   //Check if status code is 201\r",
											"   pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"content is valid\", function () {\r",
											"    //Check for appropriate content including self value\r",
											"    pm.expect(pm.response.json()[\"volume\"]).to.eq(10);\r",
											"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"Stuffed Animals\");\r",
											"    pm.expect(pm.response.json()[\"origin\"]).to.eq(\"Russia\");\r",
											"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);\r",
											"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
											"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"volume\": 10,\r\n  \"item\": \"Stuffed Animals\",\r\n  \"origin\": \"Russia\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - CREATED - Extra Attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Set appropriate environment variable for load id\r",
											"pm.environment.set(\"extra_load_id\", pm.response.json()[\"id\"]);\r",
											"\r",
											"pm.test(\"201 status code\", function () {\r",
											"   //Check if status code is 201\r",
											"   pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"content is valid\", function () {\r",
											"    //Check for appropriate content including self value\r",
											"    pm.expect(pm.response.json()[\"volume\"]).to.eq(10);\r",
											"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"Phones\");\r",
											"    pm.expect(pm.response.json()[\"origin\"]).to.eq(\"America\");\r",
											"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);\r",
											"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
											"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
											"});\r",
											"\r",
											"pm.test(\"No Extra Attributes\", function () {\r",
											"    pm.expect(pm.response.json()[\"company\"]).to.not.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"volume\": 10,\r\n  \"item\": \"Phones\",\r\n  \"origin\": \"America\",\r\n  \"company\": \"Apple\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - CREATE LOAD3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Set appropriate environment variable for load id",
											"pm.environment.set(\"load_id3\", pm.response.json()[\"id\"]);",
											"",
											"pm.test(\"201 status code\", function () {",
											"   //Check if status code is 201",
											"   pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"content is valid\", function () {",
											"    //Check for appropriate content including self value",
											"    pm.expect(pm.response.json()[\"volume\"]).to.eq(3);",
											"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"Food\");",
											"    pm.expect(pm.response.json()[\"origin\"]).to.eq(\"Belgium\");",
											"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);",
											"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
											"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"volume\": 3,\n  \"item\": \"Food\",\n  \"origin\": \"Belgium\"\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - CREATE LOAD4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Set appropriate environment variable for load id",
											"pm.environment.set(\"load_id4\", pm.response.json()[\"id\"]);",
											"",
											"pm.test(\"201 status code\", function () {",
											"   //Check if status code is 201",
											"   pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"content is valid\", function () {",
											"    //Check for appropriate content including self value",
											"    pm.expect(pm.response.json()[\"volume\"]).to.eq(4);",
											"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"Toys\");",
											"    pm.expect(pm.response.json()[\"origin\"]).to.eq(\"Canada\");",
											"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);",
											"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
											"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"volume\": 4,\n  \"item\": \"Toys\",\n  \"origin\": \"Canada\"\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - LOADED BOAT PATCH TEST1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Set appropriate environment variable for load id\r",
											"pm.environment.set(\"pt_load1\", pm.response.json()[\"id\"]);\r",
											"\r",
											"pm.test(\"201 status code\", function () {\r",
											"   //Check if status code is 201\r",
											"   pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"content is valid\", function () {\r",
											"    //Check for appropriate content including self value\r",
											"    pm.expect(pm.response.json()[\"volume\"]).to.eq(1);\r",
											"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"Laptops\");\r",
											"    pm.expect(pm.response.json()[\"origin\"]).to.eq(\"France\");\r",
											"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);\r",
											"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
											"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"volume\": 1,\r\n  \"item\": \"Laptops\",\r\n  \"creation_date\": \"12/06/2023\",\r\n  \"origin\": \"France\"\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - LOADED BOAT PATCH TEST2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Set appropriate environment variable for load id\r",
											"pm.environment.set(\"pt_load2\", pm.response.json()[\"id\"]);\r",
											"\r",
											"pm.test(\"201 status code\", function () {\r",
											"   //Check if status code is 201\r",
											"   pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"content is valid\", function () {\r",
											"    //Check for appropriate content including self value\r",
											"    pm.expect(pm.response.json()[\"volume\"]).to.eq(10);\r",
											"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"Cups\");\r",
											"    pm.expect(pm.response.json()[\"origin\"]).to.eq(\"China\");\r",
											"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);\r",
											"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
											"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"volume\": 10,\r\n  \"item\": \"Cups\",\r\n  \"origin\": \"China\"\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "415 - Wrong Media Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"415 status code\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"400 error message\", function () {\r",
											"     //Check for appropriate error message\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.equal(\"INVALID REQUEST: The server accepts 'application/json' requests only.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/html",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"volume\": 10,\r\n  \"item\": \"Cups\",\r\n  \"creation_date\": \"12/06/2023\"\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "406 - Accepts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"406 status code\", function () {\r",
											"    pm.response.to.have.status(406);\r",
											"});\r",
											"\r",
											"pm.test(\"400 error message\", function () {\r",
											"     //Check for appropriate error message\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.equal(\"INVALID REQUEST: Not an Acceptable Media Type.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accepts",
										"value": "text/html",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"volume\": 10,\r\n  \"item\": \"Cups\",\r\n  \"creation_date\": \"12/06/2023\"\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST boat",
					"item": [
						{
							"name": "201 - Standard Boat - user1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.environment.set(\"boat_id1\", pm.response.json()[\"id\"]);",
											"pm.environment.set(\"user_id1\", pm.response.json()[\"owner\"][\"id\"]);",
											"",
											"pm.test(\"201 status code\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"console.log(pm.response.json())",
											"pm.test(\"content is valid\", function () {",
											"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
											"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yacht\");",
											"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
											"    pm.expect(pm.response.json()[\"public\"]).to.eq(true);",
											"});",
											"",
											"pm.environment.set(\"boat_name\", pm.response.json()[\"name\"]);",
											"pm.environment.set(\"boat_type\", pm.response.json()[\"type\"]);",
											"pm.environment.set(\"boat_length\", pm.response.json()[\"length\"]);",
											"pm.environment.set(\"boat_public\", pm.response.json()[\"public\"]);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yacht\",\r\n  \"length\": 99,\r\n  \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Missing Length Attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 status code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"400 error message\", function () {",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: The request object is missing an attribute.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yacht\"\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Missing Name Attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"400 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: The request object is missing an attribute.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"length\": 500,\r\n  \"type\": \"Yacht\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Missing Type Attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"400 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: The request object is missing an attribute.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"length\": 500,\r\n  \"name\": \"Sea Witch\"\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Missing Public Attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 400: Missing Required Attribute\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"400 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: The request object is missing an attribute.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Public Test\",\r\n  \"type\": \"Yacht\",\r\n  \"length\": 12\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Name Over Character Limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// This Boat Object Is Violating The Character Limit Count == 55 characters\r",
											"\r",
											"pm.test(\"FAILED POST: character count over 50\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"FAILED ERROR MESSAGE\", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: An invalid attribute value detected.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"This Boat Object Is Violating The Character Limit Count\",\r\n  \"type\": \"Yacht\",\r\n  \"length\": 99,\r\n  \"public\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Invalid Characters - Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"400 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: An invalid attribute value detected.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"The!! Ship\",\r\n  \"type\": \"Yacht\",\r\n  \"length\": 99,\r\n  \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Invalid Length - Length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"400 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: An invalid attribute value detected.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Length Test\",\r\n  \"type\": \"Yacht\",\r\n  \"length\": 12345678901,\r\n  \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Invalid Characters - Length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"400 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: An invalid attribute value detected.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Length Test\",\r\n  \"type\": \"Yacth\",\r\n  \"length\": \"hello\",\r\n  \"public\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Invalid Characters - Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"400 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: An invalid attribute value detected.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Type Test\",\r\n  \"type\": \"Yacht!\",\r\n  \"length\": 12345678901,\r\n  \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Empty Body - Brackets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"400 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: Empty body is not allowed.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Empty Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"400 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: Empty body is not allowed.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - Name Exactly 50 Characters - user1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// This Boat Item Is Sending Exactly Fifty Characters == 50 characters\r",
											"\r",
											"pm.test(\"Successful POST: character count is 50\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"// setting new variables for newly created boat\r",
											"pm.environment.set(\"50boat_id\", pm.response.json()[\"id\"]);\r",
											"pm.environment.set(\"50boat_name\", pm.response.json()[\"name\"]);\r",
											"pm.environment.set(\"50boat_type\", pm.response.json()[\"type\"]);\r",
											"pm.environment.set(\"50boat_length\", pm.response.json()[\"length\"]);\r",
											"pm.environment.set(\"50boat_public\", pm.response.json()[\"public\"],)\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"This Boat Item Is Sending Exactly Fifty Characters\",\r\n  \"type\": \"Yacht\",\r\n  \"length\": 99,\r\n  \"public\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 - Unique Name Fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status 403: Non-unique Name\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"FAILED ERROR MESSAGE\", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: The request object does not have a unique name value.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yacht\",\r\n  \"length\": 99,\r\n  \"public\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Boat Count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct Boat Count\", function() {\r",
											"    pm.expect(pm.response.json()['boats'].length).to.eq(2);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - Single Extra Attribute - user2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pt:\r",
											"console.log(\"POST A BOAT: \" + pm.response.json())\r",
											"console.log(\"POST A BOAT: \" + pm.response.json()[\"name\"])\r",
											"console.log(\"POST A BOAT: \" + pm.response)\r",
											"\r",
											"pm.environment.set(\"ESA_boat_id\", pm.response.json()[\"id\"]);\r",
											"pm.environment.set(\"user_id2\", pm.response.json()[\"owner\"][\"id\"]);\r",
											"\r",
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"content is valid\", function () {\r",
											"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Voyage\");\r",
											"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yacht\");\r",
											"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);\r",
											"    pm.expect(pm.response.json()[\"public\"]).to.eq(false);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"ESA_boat_name\", pm.response.json()[\"name\"]);\r",
											"pm.environment.set(\"ESA_boat_type\", pm.response.json()[\"type\"]);\r",
											"pm.environment.set(\"ESA_boat_length\", pm.response.json()[\"length\"]);\r",
											"pm.environment.set(\"ESA_boat_public\", pm.response.json()[\"public\"]);\r",
											"pm.environment.set(\"ESA_boat_color\", pm.response.json()[\"color\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Voyage\",\r\n  \"type\": \"Yacht\",\r\n  \"length\": 99,\r\n  \"public\": false,\r\n  \"color\": \"Red\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - Multiple Attributes Added - user2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// // pt:\r",
											"// console.log(\"POST A BOAT: \" + pm.response.json())\r",
											"// console.log(\"POST A BOAT: \" + pm.response.json()[\"name\"])\r",
											"// console.log(\"POST A BOAT: \" + pm.response)\r",
											"\r",
											"pm.environment.set(\"MESA_boat_id\", pm.response.json()[\"id\"]);\r",
											"\r",
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"content is valid\", function () {\r",
											"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"The Ship\");\r",
											"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yacht\");\r",
											"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);\r",
											"    pm.expect(pm.response.json()[\"public\"]).to.eq(false);\r",
											"    pm.expect(pm.response.json()[\"color\"]).to.eq(\"Red\");\r",
											"    pm.expect(pm.response.json()[\"weight\"]).to.eq(1);\r",
											"    pm.expect(pm.response.json()[\"location\"]).to.eq(null);\r",
											"});\r",
											"\r",
											"console.log(pm.response.json())\r",
											"\r",
											"pm.environment.set(\"MESA_boat_name\", pm.response.json()[\"name\"]);\r",
											"pm.environment.set(\"MESA_boat_type\", pm.response.json()[\"type\"]);\r",
											"pm.environment.set(\"MESA_boat_length\", pm.response.json()[\"length\"]);\r",
											"pm.environment.set(\"MESA_boat_color\", pm.response.json()[\"color\"]);\r",
											"pm.environment.set(\"MESA_boat_weight\", pm.response.json()[\"weight\"]);\r",
											"pm.environment.set(\"MESA_boat_location\", pm.response.json()[\"location\"]);\r",
											"pm.environment.set(\"MESA_boat_public\", pm.response.json()[\"public\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"The Ship\",\r\n  \"type\": \"Yacht\",\r\n  \"length\": 99,\r\n  \"public\": false,\r\n  \"color\": \"Red\",\r\n  \"location\": null,\r\n  \"weight\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "415 - UnsupportedMedia Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 415\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"pm.test(\"FAILED ERROR MESSAGE\", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: The server accepts 'application/json' requests only.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/html",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Testing Wrong MIME Type\",\r\n  \"type\": \"Yacht\",\r\n  \"length\": 99\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "406 - Not an Acceptable Media Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"406 status code\", function () {",
											"    pm.response.to.have.status(406);",
											"});",
											"",
											"pm.test(\"406 error message\", function () {",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: Not an Acceptable Media Type.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/html",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Mega Boat\",\r\n  \"type\": \"Yacht\",\r\n  \"length\": 200\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - UNAUTHORIZED REQUEST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"FAILED ERROR MESSAGE\", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: Unauthorized User.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"The Ship\",\r\n  \"type\": \"Yacht\",\r\n  \"length\": 99\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - Expired Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"FAILED ERROR MESSAGE\", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID TOKEN: Please renew token by logging in again. \");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expired_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"The Ship\",\r\n  \"type\": \"Yacht\",\r\n  \"length\": 99\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - Standard Boat - user2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.environment.set(\"boat_id3\", pm.response.json()[\"id\"]);\r",
											"pm.environment.set(\"user_id3\", pm.response.json()[\"owner\"][\"id\"]);\r",
											"\r",
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"console.log(pm.response.json())\r",
											"pm.test(\"content is valid\", function () {\r",
											"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Traveler\");\r",
											"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yacht\");\r",
											"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);\r",
											"    pm.expect(pm.response.json()[\"public\"]).to.eq(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Traveler\",\r\n  \"type\": \"Yacht\",\r\n  \"length\": 99,\r\n  \"public\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - PUT boat - user1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"PUTboat_owner\", pm.response.json()['owner']['id']);\r",
											"\r",
											"pm.environment.set(\"PUTboat_id\", pm.response.json()['id']);\r",
											"pm.environment.set(\"PUTboat_name\", pm.response.json()['name']);\r",
											"pm.environment.set(\"PUTboat_type\", pm.response.json()['type']);\r",
											"pm.environment.set(\"PUTboat_length\", pm.response.json()['length']);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Sea Monster\",\r\n    \"type\": \"Cruise Ship\",\r\n    \"length\": 500,\r\n    \"public\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - MEA_boat - user2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"MEA_PUT_boat\", pm.response.json()['id']);\r",
											"pm.environment.set(\"MEA_PUT_name\", pm.response.json()['name']);\r",
											"pm.environment.set(\"MEA_PUT_type\", pm.response.json()['type']);\r",
											"pm.environment.set(\"MEA_PUT_length\", pm.response.json()['length']);\r",
											"pm.environment.set(\"MEA_PUT_owner\", pm.response.json()['owner']['id']);\r",
											"pm.environment.set(\"MEA_PUT_color\", pm.response.json()['color']);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Multiple Attributes Boat\",\r\n    \"type\": \"Multiple Attributes Test\",\r\n    \"length\": 150,\r\n    \"color\": \"Black\",\r\n    \"public\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - No Owner Boat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"no_owner_boat\", pm.response.json()['id']);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"No Owner Boat\",\r\n    \"type\": \"Multiple Attributes Test\",\r\n    \"length\": 150,\r\n    \"color\": \"Black\",\r\n    \"public\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - PATCH Test Boat - user1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set(\"patch_id\", pm.response.json()['id']);\r",
											"pm.environment.set(\"patch_name\", pm.response.json()['name']);\r",
											"pm.environment.set(\"patch_type\", pm.response.json()['type']);\r",
											"pm.environment.set(\"patch_length\", pm.response.json()['length']);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Before Patch\",\r\n  \"type\": \"Ship\",\r\n  \"length\": 100,\r\n  \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - SINGLE ATTRIBUTE PATCH BOAT - user2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set(\"single_id\", pm.response.json()['id']);\r",
											"pm.environment.set(\"single_name\", pm.response.json()['name']);\r",
											"pm.environment.set(\"single_type\", pm.response.json()['type']);\r",
											"pm.environment.set(\"single_length\", pm.response.json()['length']);\r",
											"pm.environment.set(\"single_public\", pm.response.json()['public']);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Single Patch\",\r\n  \"type\": \"Ship\",\r\n  \"length\": 100,\r\n  \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - PATCH LOADED BOAT - user 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set(\"loaded_id\", pm.response.json()['id']);\r",
											"pm.environment.set(\"loaded_name\", pm.response.json()['name']);\r",
											"pm.environment.set(\"loaded_type\", pm.response.json()['type']);\r",
											"pm.environment.set(\"loaded_length\", pm.response.json()['length']);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Loaded Patch\",\r\n  \"type\": \"Ship\",\r\n  \"length\": 100,\r\n  \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - FILLER BOAT (PAGINATION)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.environment.set(\"filler1\", pm.response.json()[\"id\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"FILLER BOAT1\",\r\n  \"type\": \"Ship\",\r\n  \"length\": 100,\r\n  \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - FILLER BOAT (PAGINATION) 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.environment.set(\"filler2\", pm.response.json()[\"id\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"FILLER BOAT2\",\r\n  \"type\": \"Ship\",\r\n  \"length\": 100,\r\n  \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "GET",
			"item": [
				{
					"name": "GET boat",
					"item": [
						{
							"name": "200 - boat_id - VALID AUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"content is valid\", function () {",
											"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
											"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yacht\");",
											"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{app_url}}/boats/{{boat_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boat_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - GET boat_id - INCORRECT AUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"ERROR MESSAGE\", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: This owner_id does not own this boat.\");\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{app_url}}/boats/{{boat_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boat_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - GET boat_id - Expired Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"ERROR MESSAGE\", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID TOKEN: Please renew token by logging in again. \");\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expired_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{app_url}}/boats/{{boat_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boat_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - GET 50boat_id - AUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"id is valid\", function () {\r",
											"    pm.expect(pm.response.json()[\"id\"]).to.eq(pm.environment.get(\"50boat_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"name is valid\", function () {\r",
											"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"50boat_name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"type is valid\", function () {\r",
											"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"50boat_type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"length is valid\", function () {\r",
											"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"50boat_length\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{app_url}}/boats/{{50boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{50boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Single Extra Attribute Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"SUCCESSFUL GET: The Post Worked\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"VALID ID\", function () {\r",
											"    pm.expect(pm.response.json()[\"id\"]).to.eq(pm.environment.get(\"ESA_boat_id\"));\r",
											"});\r",
											"pm.test(\"VALID NAME\", function () {\r",
											"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"ESA_boat_name\"));\r",
											"});\r",
											"pm.test(\"VALID TYPE\", function () {\r",
											"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"ESA_boat_type\"));\r",
											"});\r",
											"pm.test(\"VALID LENGTH\", function () {\r",
											"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"ESA_boat_length\"));\r",
											"});\r",
											"\r",
											"// verify self\r",
											"pm.test(\"Self Attribute is Correct\", function () {\r",
											"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
											"    console.log(self_url)\r",
											"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
											"})\r",
											"\r",
											"// testing the extra attribute?\r",
											"pm.test(\"VALID COLOR\", function () {\r",
											"    pm.expect(pm.response.json()[\"color\"]).to.eq(pm.environment.get(\"ESA_boat_color\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{app_url}}/boats/{{ESA_boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{ESA_boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Multiple Attributes Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"SUCCESSFUL GET: The Post Worked\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"VALID ID\", function () {\r",
											"    pm.expect(pm.response.json()[\"id\"]).to.eq(pm.environment.get(\"MESA_boat_id\"));\r",
											"});\r",
											"pm.test(\"VALID NAME\", function () {\r",
											"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"MESA_boat_name\"));\r",
											"});\r",
											"pm.test(\"VALID TYPE\", function () {\r",
											"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"MESA_boat_type\"));\r",
											"});\r",
											"pm.test(\"VALID LENGTH\", function () {\r",
											"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"MESA_boat_length\"));\r",
											"});\r",
											"\r",
											"// testing the extra attribute?\r",
											"pm.test(\"VALID COLOR\", function () {\r",
											"    pm.expect(pm.response.json()[\"color\"]).to.eq(pm.environment.get(\"MESA_boat_color\"));\r",
											"});\r",
											"pm.test(\"VALID WEIGHT\", function () {\r",
											"    pm.expect(pm.response.json()[\"weight\"]).to.eq(pm.environment.get(\"MESA_boat_weight\"));\r",
											"});\r",
											"pm.test(\"VALID LOCATION\", function () {\r",
											"    pm.expect(pm.response.json()[\"location\"]).to.eq(pm.environment.get(\"MESA_boat_location\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{MESA_boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{MESA_boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 - Invalid Boat ID - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"pm.test(\"404 error message\", function () {",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: No boat with this boat_id exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{invalid_boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 - Invalid Boat ID- HTML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"404 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: No boat with this boat_id exists.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{invalid_boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"JSON Response\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-type\")).to.include('application/json');\r",
											"})\r",
											"\r",
											"pm.test(\"id is valid\", function () {\r",
											"    pm.expect(pm.response.json()[\"id\"]).to.eq(pm.environment.get(\"boat_id1\"));\r",
											"});\r",
											"\r",
											"pm.test(\"name is valid\", function () {\r",
											"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"boat_name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"type is valid\", function () {\r",
											"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"boat_type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"length is valid\", function () {\r",
											"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"boat_length\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{app_url}}/boats/{{boat_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boat_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - HTML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(pm.response.text())\r",
											"pm.test(\"HTML Response\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-type\")).to.include('text/html');\r",
											"})\r",
											"\r",
											"pm.test(\"id is valid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"boat_id1\"));\r",
											"});\r",
											"\r",
											"pm.test(\"name is valid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"boat_name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"type is valid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"boat_type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"length is valid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"boat_length\"));\r",
											"});\r",
											"\r",
											"// pm.test(\"<li> Count Matches Attribute Count\", function() {\r",
											"//     pm.expect(pm.response.text()['li'].length).to.eq(6)\r",
											"// })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{app_url}}/boats/{{boat_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boat_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "406 - Not An Acceptable Media Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"406 status code\", function () {\r",
											"    pm.response.to.have.status(406);\r",
											"});\r",
											"\r",
											"pm.test(\"error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: Not an Acceptable Media Type.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/atom+xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{app_url}}/boats/{{boat_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boat_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - GET 50_boat_id - NO AUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"401 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: Unauthorized User.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{50boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{50boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - GET boats - NO AUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Boat Count\", function () {\r",
											"    pm.expect(pm.response.json()['total']).to.eq(13)\r",
											"})\r",
											"\r",
											"pm.test(\"Next Exists\", function () {\r",
											"    pm.expect(pm.response.json()['next']).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - GET boats - AUTH - JWT1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Owner Boat Count\", function () {\r",
											"    pm.expect(pm.response.json()['total']).to.eq(8)\r",
											"})\r",
											"\r",
											"pm.test(\"Next Exists\", function () {\r",
											"    pm.expect(pm.response.json()['next']).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - GET boats - AUTH - JWT2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Owner Boat Count\", function () {\r",
											"    pm.expect(pm.response.json()['total']).to.eq(5)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - GET boat_id1 - NO AUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"ERROR MESSAGE\", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: Unauthorized User.\");\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{app_url}}/boats/{{boat_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boat_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - GET boats - Expired Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"ERROR MESSAGE\", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID TOKEN: Please renew token by logging in again. \");\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expired_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{app_url}}/boats/{{boat_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boat_id1}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET owners",
					"item": [
						{
							"name": "200 - GET owners",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"owner count\", function () {\r",
											"    pm.expect(pm.response.json()['total']).to.not.eq(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - GET user_id1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"owner boat count\", function () {\r",
											"    pm.expect(pm.response.json()['boats'].length).to.eq(8);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - get USER_ID2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"owner boat count\", function () {\r",
											"    pm.expect(pm.response.json()['boats'].length).to.eq(5);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 - Non-existent Owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 status code\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"404 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: This owner_id does not exist.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{invalid_owner_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{invalid_owner_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 - VALID JWT, WRONG OWNER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"403 status code\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"403 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: This verified user is not authorized for this request.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - GET A USER WITH NO JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"401 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: Unauthorized User.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id3}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - GET A USER WITH EXPIRED JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"401 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID TOKEN: Please renew token by logging in again. \");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expired_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id3}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id3}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET LOADS",
					"item": [
						{
							"name": "200 - GET ALL LOADS - PAGINATION",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Load Count\", function () {\r",
											"    pm.expect(pm.response.json()['total']).to.eq(7);\r",
											"});\r",
											"\r",
											"pm.test(\"Next Exists\", function () {\r",
											"    pm.expect(pm.response.json()['next']).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - LOAD1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// verify self\r",
											"pm.test(\"Self Attribute is Correct\", function () {\r",
											"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
											"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{load_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{load_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - LOAD2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// verify self\r",
											"pm.test(\"Self Attribute is Correct\", function () {\r",
											"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
											"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{load_id2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{load_id2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 - Non-existent load",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 status code\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"404 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: No load with this load_id exists.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{invalid_load_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{invalid_load_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "LOADS / BOATS",
			"item": [
				{
					"name": "200 - boat_id1 HAS NO LOADS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"NO LOADS\", function () {\r",
									"    pm.expect(pm.response.json()['loads'].length).to.eq(0);\r",
									"})\r",
									"\r",
									"pm.environment.set(\"before_load_count\", pm.response.json()['loads'].length);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 - LOAD1 - BOAT1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for appropriate 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id1}}/loads/{{load_id1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id1}}",
								"loads",
								"{{load_id1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 - LOAD2 - BOAT1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for appropriate 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id1}}/loads/{{load_id2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id1}}",
								"loads",
								"{{load_id2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 - LOAD2 - ALREADY LOADED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for appropriate 204 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ERROR MESSAGE\", function () {\r",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: The load is already loaded on another boat.\");\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id1}}/loads/{{load_id2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id1}}",
								"loads",
								"{{load_id2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 - LOAD3 - BOAT1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for appropriate 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id1}}/loads/{{load_id3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id1}}",
								"loads",
								"{{load_id3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 - VALID JWT, BUT WRONG OWNER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for appropriate 204 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ERROR MESSAGE\", function () {\r",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: This owner_id has no relation with this boat_id.\");\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id1}}/loads/{{load_id4}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id1}}",
								"loads",
								"{{load_id4}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 - Expired JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for appropriate 204 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ERROR MESSAGE\", function () {\r",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID TOKEN: Please renew token by logging in again. \");\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{expired_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id1}}/loads/{{load_id4}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id1}}",
								"loads",
								"{{load_id4}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - Non-Existent Load",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"error message\", function () {\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: The specified boat and/or load does not exist.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{50boat_id}}/loads/{{invalid_load_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{50boat_id}}",
								"loads",
								"{{invalid_load_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - Non-Existent Boat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"error message\", function () {\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: The specified boat and/or load does not exist.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{invalid_load_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{invalid_boat_id}}",
								"loads",
								"{{invalid_load_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 - UNAUTHORIZED LOADING",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for appropriate 204 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ERROR MESSAGE\", function () {\r",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: Unauthorized User.\");\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id1}}/loads/{{load_id1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id1}}",
								"loads",
								"{{load_id1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 - LOAD4 - PUT BOAT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for appropriate 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{PUTboat_id}}/loads/{{load_id4}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{PUTboat_id}}",
								"loads",
								"{{load_id4}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - LOAD COUNT CHECK - boat_id1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"LOAD COUNT CHECK\", function() {\r",
									"    pm.expect(pm.environment.get('before_load_count')).to.not.eq(pm.response.json()['loads'].length);\r",
									"    pm.expect(pm.response.json()['loads'].length).to.not.eq(0);\r",
									"})\r",
									"\r",
									"pm.test(\"CORRECT LOAD COUNT CHECK\", function() {\r",
									"    pm.expect(pm.response.json()['loads'].length).to.eq(3);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 - NO AUTH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"error message\", function () {\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: Unauthorized User.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{50boat_id}}/loads/{{load_id2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{50boat_id}}",
								"loads",
								"{{load_id2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - delete wrong load",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"error message\", function () {\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: No boat with this boat_id is loaded with the load with this load_id.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{50boat_id}}/loads/{{load_id2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{50boat_id}}",
								"loads",
								"{{load_id2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 - DEASSIGN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for appropriate 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id1}}/loads/{{load_id1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id1}}",
								"loads",
								"{{load_id1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - DELOAD A DELOADED LOAD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"404 error message\", function () {\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: No boat with this boat_id is loaded with the load with this load_id.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id1}}/loads/{{load_id1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id1}}",
								"loads",
								"{{load_id1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 - VALID JWT, WRONG OWNER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"401 error message\", function () {\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: This valid user has no relation with this boat.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id1}}/loads/{{load_id1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id1}}",
								"loads",
								"{{load_id1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 - Expired Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"401 error message\", function () {\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID TOKEN: Please renew token by logging in again. \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{expired_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id1}}/loads/{{load_id1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id1}}",
								"loads",
								"{{load_id1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 - DEASSIGN No Owner Boat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/owners/{{user_id1}}/boats/{{no_owner_boat}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"owners",
								"{{user_id1}}",
								"boats",
								"{{no_owner_boat}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 - NO OWNER BOAT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"error message\", function () {\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: This boat has no owner.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{no_owner_boat}}/loads/{{load_id1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{no_owner_boat}}",
								"loads",
								"{{load_id1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - CHECK IF LOAD GOT DELOADED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Load Length Decreased By 1\", function () {\r",
									"    pm.expect(pm.response.json()[\"loads\"].length).to.eq(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 - PT_LOAD1 & LOADED BOAT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for appropriate 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{loaded_id}}/loads/{{pt_load1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{loaded_id}}",
								"loads",
								"{{pt_load1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 - PT_LOAD2 & LOADED BOAT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for appropriate 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{loaded_id}}/loads/{{pt_load2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{loaded_id}}",
								"loads",
								"{{pt_load2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - INVALID BOAT ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    //Check for appropriate 204 status code\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ERROR MESSAGE\", function () {\r",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: The specified boat and/or load does not exist.\");\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{load_id2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{invalid_boat_id}}",
								"loads",
								"{{load_id2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - INVALID LOAD ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    //Check for appropriate 204 status code\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ERROR MESSAGE\", function () {\r",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: The specified boat and/or load does not exist.\");\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id1}}/loads/{{invalid_load_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id1}}",
								"loads",
								"{{invalid_load_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "405 - WRONG ENDPOINT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {\r",
									"    //Check for appropriate 204 status code\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ERROR MESSAGE\", function () {\r",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: This method is not supported at this endpoint.\");\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{load_id2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{invalid_boat_id}}",
								"loads",
								"{{load_id2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PATCH",
			"item": [
				{
					"name": "PATCH BOAT",
					"item": [
						{
							"name": "201 - patch_id BOAT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"console.log(pm.response.json())\r",
											"pm.test(\"Content is valid\", function () {\r",
											"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Patched Boat\");\r",
											"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Galleon\");\r",
											"    pm.expect(pm.response.json()[\"length\"]).to.eq(111);\r",
											"    pm.expect(pm.response.json()[\"public\"]).to.eq(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Content Changed From Initial Creation\", function () {\r",
											"    pm.expect(pm.response.json()[\"name\"]).to.not.eq(pm.environment.get(\"patch_name\"));\r",
											"    pm.expect(pm.response.json()[\"type\"]).to.not.eq(pm.environment.get(\"patch_type\"));\r",
											"    pm.expect(pm.response.json()[\"length\"]).to.not.eq(pm.environment.get(\"patch_length\"));\r",
											"    pm.expect(pm.response.json()[\"public\"]).to.not.eq(pm.environment.get(\"patch_public\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Patched Boat\",\r\n  \"type\": \"Galleon\",\r\n  \"length\": 111,\r\n  \"public\": false\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{patch_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{patch_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - Non-existing Attribute Patch - Excluded",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"console.log(pm.response.json())\r",
											"pm.test(\"Content is valid\", function () {\r",
											"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Patched Boat\");\r",
											"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Galleon\");\r",
											"    pm.expect(pm.response.json()[\"length\"]).to.eq(111);\r",
											"    pm.expect(pm.response.json()[\"public\"]).to.eq(false);\r",
											"});\r",
											"\r",
											"pm.test(\"No New Attribute Added\", function () {\r",
											"    pm.expect(pm.response.json()[\"color\"]).to.not.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Patched Boat\",\r\n  \"type\": \"Galleon\",\r\n  \"length\": 111,\r\n  \"public\": false,\r\n  \"color\": \"Red\"\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{patch_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{patch_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - EMPTY BODY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: Empty body is not allowed.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{patch_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{patch_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - JWT != OWNER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: This owner_id has no relation with this boat_id.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Patched Boat\",\r\n  \"type\": \"Ship\",\r\n  \"length\": 100,\r\n  \"public\": false\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{50boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{50boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 - Non-Unique Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"403 status code\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: The request object does not have a unique name value.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Ship\",\r\n  \"length\": 100,\r\n  \"public\": false\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{50boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{50boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - NO AUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: Unauthorized User.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Patched Boat\",\r\n  \"type\": \"Ship\",\r\n  \"length\": 100,\r\n  \"public\": false\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{50boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{50boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Edit id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"400 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: The id cannot be edited.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1234,  \r\n  \"name\": \"Failed Boat\",\r\n  \"type\": \"Ship\",\r\n  \"length\": 100,\r\n  \"public\": false\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boat_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boat_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - Single Attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"console.log(pm.response.json())\r",
											"pm.test(\"Content is valid\", function () {\r",
											"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Single Patch\");\r",
											"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Ship\");\r",
											"    pm.expect(pm.response.json()[\"length\"]).to.eq(100);\r",
											"    pm.expect(pm.response.json()[\"public\"]).to.eq(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Content Changed From Initial Creation\", function () {\r",
											"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"single_name\"));\r",
											"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"single_type\"));\r",
											"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"single_length\"));\r",
											"    pm.expect(pm.response.json()[\"public\"]).to.not.eq(pm.environment.get(\"single_public\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"public\": false\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{single_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{single_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - Boat Has No Owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"401 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: This owner_id has no relation with this boat_id.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Patched Boat\",\r\n  \"type\": \"Ship\",\r\n  \"length\": 100,\r\n  \"public\": false\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{no_owner_boat}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{no_owner_boat}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 - INVALID BOAT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 status code\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"404 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: No boat with this boat_id exists.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Patched Boat\",\r\n  \"type\": \"Ship\",\r\n  \"length\": 100,\r\n  \"public\": false\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{invalid_boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "406 - Wrong Acceptable Media",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"406 status code\", function () {\r",
											"    pm.response.to.have.status(406);\r",
											"});\r",
											"\r",
											"pm.test(\"406 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: Not an Acceptable Media Type.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/atom+xml",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Patched Boat\",\r\n  \"type\": \"Ship\",\r\n  \"length\": 100,\r\n  \"public\": false\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{no_owner_boat}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{no_owner_boat}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "415 - Wrong Media Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"415 status code\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"415 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: The server accepts 'application/json' requests only.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "text/html",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Patched Boat\",\r\n  \"type\": \"Ship\",\r\n  \"length\": 100,\r\n  \"public\": false\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{no_owner_boat}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{no_owner_boat}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - PATCH A LOADED BOAT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"console.log(pm.response.json())\r",
											"pm.test(\"Content is valid\", function () {\r",
											"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Patched Loaded\");\r",
											"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Galleon\");\r",
											"    pm.expect(pm.response.json()[\"length\"]).to.eq(90);\r",
											"    pm.expect(pm.response.json()[\"public\"]).to.eq(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Content Changed From Initial Creation\", function () {\r",
											"    pm.expect(pm.response.json()[\"name\"]).to.not.eq(pm.environment.get(\"loaded_name\"));\r",
											"    pm.expect(pm.response.json()[\"type\"]).to.not.eq(pm.environment.get(\"loaded_type\"));\r",
											"    pm.expect(pm.response.json()[\"length\"]).to.not.eq(pm.environment.get(\"loaded_length\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Patched Loaded\",\r\n  \"type\": \"Galleon\",\r\n  \"length\": 90,\r\n  \"public\": false\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{loaded_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{loaded_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PATCH LOAD",
					"item": [
						{
							"name": "201 - PATCH load_id1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 status code\", function () {\r",
											"   //Check if status code is 201\r",
											"   pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"content is valid\", function () {\r",
											"    //Check for appropriate content including self value\r",
											"    pm.expect(pm.response.json()[\"volume\"]).to.eq(6);\r",
											"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"Water Bottles\");\r",
											"    pm.expect(pm.response.json()[\"origin\"]).to.eq(\"Netherlands\");\r",
											"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);\r",
											"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
											"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
											"});\r",
											"\r",
											"pm.test(\"PATCH HAPPENED\", function () {\r",
											"    //Check for appropriate content including self value\r",
											"    pm.expect(pm.response.json()[\"volume\"]).to.not.eq(5);\r",
											"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"Water Bottles\");\r",
											"    pm.expect(pm.response.json()[\"origin\"]).to.eq(\"Netherlands\");\r",
											"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);\r",
											"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
											"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"volume\": 6,\r\n  \"item\": \"Water Bottles\",\r\n  \"origin\": \"Netherlands\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{load_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{load_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - Single PATCH load_id2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 status code\", function () {\r",
											"   //Check if status code is 201\r",
											"   pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"content is valid\", function () {\r",
											"    //Check for appropriate content including self value\r",
											"    pm.expect(pm.response.json()[\"volume\"]).to.eq(20);\r",
											"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"Stuffed Animals\");\r",
											"    pm.expect(pm.response.json()[\"origin\"]).to.eq(\"Russia\");\r",
											"    pm.expect(pm.response.json()[\"carrier\"]['name']).to.equal('Odyssey');\r",
											"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
											"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
											"});\r",
											"\r",
											"pm.test(\"PATCH HAPPENED\", function () {\r",
											"    //Check for appropriate content including self value\r",
											"    pm.expect(pm.response.json()[\"volume\"]).to.not.eq(10);\r",
											"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"Stuffed Animals\");\r",
											"    pm.expect(pm.response.json()[\"origin\"]).to.eq(\"Russia\");\r",
											"    pm.expect(pm.response.json()[\"carrier\"]['name']).to.equal('Odyssey');\r",
											"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
											"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"volume\": 20\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{load_id2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{load_id2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Edit id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"400 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: The id cannot be edited.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1234,  \r\n  \"name\": \"Failed Boat\",\r\n  \"type\": \"Ship\",\r\n  \"length\": 100,\r\n  \"public\": false\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{load_id3}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{load_id3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - EMPTY BODY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: Empty body is not allowed.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boat_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boat_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 - INVALID LOAD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 status code\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"404 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: No load with this load_id exists.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Patched Boat\",\r\n  \"type\": \"Ship\",\r\n  \"length\": 100,\r\n  \"public\": false\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads/{{invalid_load_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{invalid_load_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "406 - Wrong Acceptable Media Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"406 status code\", function () {\r",
											"    pm.response.to.have.status(406);\r",
											"});\r",
											"\r",
											"pm.test(\"406 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: Not an Acceptable Media Type.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/atom+xml",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Patched Boat\",\r\n  \"type\": \"Ship\",\r\n  \"length\": 100,\r\n  \"public\": false\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads/{{load_id4}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{load_id4}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "415 - Wrong Media Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"415 status code\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"415 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: The server accepts 'application/json' requests only.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "text/html",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Patched Boat\",\r\n  \"type\": \"Ship\",\r\n  \"length\": 100,\r\n  \"public\": false\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads/{{load_id4}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{load_id4}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "PUT",
			"item": [
				{
					"name": "PUT Boats",
					"item": [
						{
							"name": "201 - Standard Attributes (ALL) - Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"content is valid\", function () {\r",
											"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Rocks\");\r",
											"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Tanker Boat\");\r",
											"    pm.expect(pm.response.json()[\"length\"]).to.eq(600);\r",
											"    pm.expect(pm.response.json()[\"public\"]).to.eq(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"PUT_name\", pm.response.json()[\"name\"]);\r",
											"pm.environment.set(\"PUT_type\", pm.response.json()[\"type\"]);\r",
											"pm.environment.set(\"PUT_length\", pm.response.json()[\"length\"]);\r",
											"pm.environment.set(\"PUT_public\", pm.response.json()[\"public\"]);\r",
											"pm.environment.set(\"PUT_owner\", pm.response.json()[\"owner\"]['id']);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Sea Rocks\",\r\n    \"type\": \"Tanker Boat\",\r\n    \"length\": 600,\r\n    \"public\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{PUTboat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{PUTboat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Standard Attributes Boat Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// verify content\r",
											"pm.test(\"Verify id\", function() {\r",
											"    pm.expect(pm.response.json()[\"id\"]).to.eq(pm.environment.get(\"PUTboat_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Verify name\", function() {\r",
											"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"PUT_name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Verify type\", function() {\r",
											"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"PUT_type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Verify length\", function() {\r",
											"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"PUT_length\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify owner\", function() {\r",
											"    pm.expect(pm.response.json()[\"owner\"].id).to.eq(pm.environment.get(\"PUT_owner\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Verify public\", function() {\r",
											"    pm.expect(pm.response.json()[\"public\"]).to.eq(pm.environment.get(\"PUT_public\"));\r",
											"});\r",
											"\r",
											"\r",
											"// verify self\r",
											"pm.test(\"Self Attribute is Correct\", function () {\r",
											"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
											"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
											"});\r",
											"\r",
											"console.log(pm.response.json())\r",
											"console.log(pm.response.json()['public'])"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{PUTboat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{PUTboat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - Multiple Attributes Addition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"MEA_name\", pm.response.json()[\"name\"]);\r",
											"pm.environment.set(\"MEA_type\", pm.response.json()[\"type\"]);\r",
											"pm.environment.set(\"MEA_length\", pm.response.json()[\"length\"]);\r",
											"pm.environment.set(\"MEA_public\", pm.response.json()[\"public\"]);\r",
											"pm.environment.set(\"MEA_color\", pm.response.json()[\"color\"]);\r",
											"pm.environment.set(\"MEA_edition\", pm.response.json()[\"edition\"]);\r",
											"pm.environment.set(\"MEA_weight\", pm.response.json()[\"weight\"]);\r",
											"\r",
											"pm.environment.set(\"MEA_id\", pm.response.json()[\"id\"]);\r",
											"\r",
											"\r",
											"pm.environment.set(\"MEA_owner\", pm.response.json()[\"owner\"][\"id\"]); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Multiple Attributes Boat\",\r\n    \"type\": \"Multiple Attributes Test\",\r\n    \"length\": 150,\r\n    \"color\": \"Black\",\r\n    \"weight\": 1,\r\n    \"edition\": 1,\r\n    \"public\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{MEA_PUT_boat}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{MEA_PUT_boat}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Multiple Attributes - Successful Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// verify content\r",
											"pm.test(\"Verify id\", function() {\r",
											"    pm.expect(pm.response.json()[\"id\"]).to.eq(pm.environment.get(\"MEA_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Verify name\", function() {\r",
											"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"MEA_name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Verify type\", function() {\r",
											"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"MEA_type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Verify length\", function() {\r",
											"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"MEA_length\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Verify color\", function() {\r",
											"    pm.expect(pm.response.json()[\"color\"]).to.eq(pm.environment.get(\"MEA_color\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Verify owner\", function() {\r",
											"    pm.expect(pm.response.json()[\"owner\"]['id']).to.eq(pm.environment.get(\"MEA_owner\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Verify weight\", function() {\r",
											"    pm.expect(pm.response.json()[\"weight\"]).to.eq(pm.environment.get(\"MEA_weight\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Verify edition\", function() {\r",
											"    pm.expect(pm.response.json()[\"edition\"]).to.eq(pm.environment.get(\"MEA_edition\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Verify public\", function() {\r",
											"    pm.expect(pm.response.json()[\"public\"]).to.eq(pm.environment.get(\"MEA_public\"));\r",
											"});\r",
											"\r",
											"// verify self\r",
											"pm.test(\"Self Attribute is Correct\", function () {\r",
											"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
											"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{MEA_PUT_boat}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{MEA_PUT_boat}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "405 - Method Not Allowed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: This method is not supported at this endpoint.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 - invalid boat id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 status code\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message Verification\", function() {\r",
											"    pm.expect(pm.response.json()['Error']).to.eq('INVALID REQUEST: No boat with this boat_id exists.')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Invalid Boat\",\r\n    \"type\": \"Invalid Boat Type\",\r\n    \"length\": 100,\r\n    \"public\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{invalid_boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 - WRONG OWNER - BOAT RELATION",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message Verification\", function() {\r",
											"    pm.expect(pm.response.json()['Error']).to.eq('INVALID REQUEST: This owner_id has no relation with this boat_id.')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Sea Rock\",\r\n    \"type\": \"Tanker Boat\",\r\n    \"length\": 600,\r\n    \"public\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boat_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boat_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - Add New Attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Content Check\r",
											"pm.test(\"Added Attributes Content Verification\", function() {\r",
											"    pm.expect(pm.response.json()['new_attribute1']).to.eq(1000);\r",
											"    pm.expect(pm.response.json()['new_attribute2']).to.eq('Testing');\r",
											"    pm.expect(pm.response.json()['new_attribute3']).to.eq(1234567890);\r",
											"});\r",
											"\r",
											"pm.test(\"Main Attributes Did Not Get Changed\", function() {\r",
											"    pm.expect(pm.response.json()['name']).to.eq('Sea Rider');\r",
											"    pm.expect(pm.response.json()['type']).to.eq('Cruise Ship');\r",
											"    pm.expect(pm.response.json()['length']).to.eq(500);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Sea Rider\",\r\n    \"type\": \"Cruise Ship\",\r\n    \"length\": 500,\r\n    \"new_attribute1\": 1000,\r\n    \"new_attribute2\": \"Testing\",\r\n    \"new_attribute3\": 1234567890,\r\n    \"public\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{MEA_PUT_boat}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{MEA_PUT_boat}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Empty Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message\", function() {\r",
											"    pm.expect(pm.response.json()['Error']).to.eq('INVALID REQUEST: Empty body is not allowed.');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{PUTboat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{PUTboat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Failed ID PUT Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: The id cannot be edited.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 123\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boat_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boat_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 - Non-Unique Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"403 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: The request object does not have a unique name value.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yacht\",\r\n  \"length\": 99,\r\n  \"public\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{50boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{50boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - 50 Characters Limit Fail - Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: An invalid attribute value detected.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"This Boat Item Is Sending Over Fifty Characters For The Name\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99,\r\n  \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{50boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{50boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - 50 Character Limit Fail - Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: An invalid attribute value detected.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"This Boat Item Is Sending Exactly Fifty Characters\",\r\n  \"type\": \"Extremely Long New Limited Edition Boat Type For PUT\",\r\n  \"length\": 99,\r\n  \"public\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{50boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{50boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - 10 Characters Limit Fail - Length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: An invalid attribute value detected.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"This Boat Item Is Sending Exactly Fifty Characters\",\r\n  \"type\": \"Yacht\",\r\n  \"length\": 123456789123,\r\n  \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{50boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{50boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Missing Name Attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: The request object is missing an attribute.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"Tanker Boat\",\r\n    \"length\": 600,\r\n    \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{PUTboat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{PUTboat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Failed ID PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: The id cannot be edited.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 123,\r\n    \"name\": \"Failed PUT\",\r\n    \"type\": \"Tanker Boat\",\r\n    \"length\": 600\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{PUTboat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{PUTboat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Missing Type Attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: The request object is missing an attribute.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Failed PUT\",\r\n    \"length\": 600\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{PUTboat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{PUTboat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Missing Length Attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: The request object is missing an attribute.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Failed PUT\",\r\n    \"type\": \"Failed PUT\"\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{PUTboat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{PUTboat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "406 - Not Acceptable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"406 status code\", function () {\r",
											"    pm.response.to.have.status(406);\r",
											"});\r",
											"\r",
											"pm.test(\"406 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: Not an Acceptable Media Type.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/atom+xml",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Testing Put\",\r\n    \"type\": \"PUT Boat\",\r\n    \"length\": 300\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boat_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boat_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - NO AUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message Verification\", function() {\r",
											"    pm.expect(pm.response.json()['Error']).to.eq('INVALID REQUEST: Unauthorized User.')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Sea Wave\",\r\n    \"type\": \"Cruise Ship\",\r\n    \"length\": 500,\r\n    \"new_attribute1\": 1000,\r\n    \"new_attribute2\": \"Testing\",\r\n    \"new_attribute3\": 1234567890,\r\n    \"public\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{MEA_PUT_boat}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{MEA_PUT_boat}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - VALID JWT, WRONG OWNER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message Verification\", function() {\r",
											"    pm.expect(pm.response.json()['Error']).to.eq('INVALID REQUEST: This owner_id has no relation with this boat_id.')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Sea Wave\",\r\n    \"type\": \"Cruise Ship\",\r\n    \"length\": 500,\r\n    \"new_attribute1\": 1000,\r\n    \"new_attribute2\": \"Testing\",\r\n    \"new_attribute3\": 1234567890,\r\n    \"public\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boat_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boat_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "415 - Wrong Media Type Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"415 status code\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"415 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: The server accepts 'application/json' requests only.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "text/html",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Patched Boat\",\r\n  \"type\": \"Ship\",\r\n  \"length\": 100,\r\n  \"public\": false\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boat_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boat_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - UPDATE LOADED BOAT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// verify content\r",
											"pm.test(\"content is valid\", function () {\r",
											"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Standard\");\r",
											"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Ferry Boat\");\r",
											"    pm.expect(pm.response.json()[\"length\"]).to.eq(150);\r",
											"    pm.expect(pm.response.json()[\"color\"]).to.eq('Black');\r",
											"    pm.expect(pm.response.json()[\"weight\"]).to.eq(1);\r",
											"    pm.expect(pm.response.json()[\"edition\"]).to.eq(1);\r",
											"    pm.expect(pm.response.json()[\"public\"]).to.eq(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Load Didn't Change\", function () {\r",
											"    pm.expect(pm.response.json()[\"loads\"].length).to.eq(2);\r",
											"});\r",
											"\r",
											"console.log(pm.response.json())\r",
											"\r",
											"// verify self\r",
											"pm.test(\"Self Attribute is Correct\", function () {\r",
											"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
											"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accepts",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Standard\",\r\n    \"type\": \"Ferry Boat\",\r\n    \"length\": 150,\r\n    \"color\": \"Black\",\r\n    \"weight\": 1,\r\n    \"edition\": 1,\r\n    \"public\": false\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boat_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boat_id1}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT LOADS",
					"item": [
						{
							"name": "201 - load_id1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"content changed\", function () {\r",
											"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Sets\");\r",
											"    pm.expect(pm.response.json()[\"volume\"]).to.eq(6);\r",
											"    pm.expect(pm.response.json()[\"origin\"]).to.eq('America');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"volume\": 6,\r\n  \"item\": \"LEGO Sets\",\r\n  \"origin\": \"America\"\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads/{{load_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{load_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "406 - Not Acceptable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"406 status code\", function () {\r",
											"    pm.response.to.have.status(406);\r",
											"});\r",
											"\r",
											"pm.test(\"406 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: Not an Acceptable Media Type.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/atom+xml",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"volume\": 2,\r\n  \"item\": \"Pencils\",\r\n  \"origin\": \"Canada\"\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads/{{load_id3}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{load_id3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - 10 Characters Limit Fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: An invalid attribute value detected.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"volume\": 123467891045,\r\n  \"item\": \"LEGO Sets\",\r\n  \"origin\": \"America\"\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads/{{load_id4}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{load_id4}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Empty Body Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message\", function() {\r",
											"    pm.expect(pm.response.json()['Error']).to.eq('INVALID REQUEST: Empty body is not allowed.');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{load_id4}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{load_id4}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - New Attributes ignored - load_id1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"content changed\", function () {\r",
											"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"Pencils\");\r",
											"    pm.expect(pm.response.json()[\"volume\"]).to.eq(100);\r",
											"    pm.expect(pm.response.json()[\"origin\"]).to.eq('Canada');\r",
											"});\r",
											"\r",
											"pm.test(\"New Attribute Not Added\", function () {\r",
											"    pm.expect(pm.response.json()[\"creation_date\"]).to.not.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"volume\": 100,\r\n  \"item\": \"Pencils\",\r\n  \"origin\": \"Canada\",\r\n  \"creation_date\": \"10/23/2023\"\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads/{{load_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{load_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 - Non-existent Load",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 status code\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: No load with this load_id exists.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"volume\": 6,\r\n  \"item\": \"LEGO Sets\",\r\n  \"origin\": \"America\"\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads/{{invalid_load_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{invalid_load_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "415 - Wrong Media Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"415 status code\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"415 error message\", function () {\r",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: The server accepts 'application/json' requests only.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "text/html",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"volume\": 100,\r\n  \"item\": \"Pencils\",\r\n  \"origin\": \"Canada\"\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads/{{load_id3}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{load_id3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Missing Attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: The request object is missing an attribute.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"volume\": 100\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads/{{load_id2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{load_id2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Edit ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: The id cannot be edited.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"volume\": 50,\r\n  \"item\": \"Soccer Balls\",\r\n  \"origin\": \"Qatar\",\r\n  \"id\": 1234\r\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads/{{load_id2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{load_id2}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "OWNER - BOATS",
			"item": [
				{
					"name": "DEASSGIN",
					"item": [
						{
							"name": "403 - Boat Has No Owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"403 status code\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: This boat has no owner.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id2}}/boats/{{no_owner_boat}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id2}}",
										"boats",
										"{{no_owner_boat}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DEASSIGN boat1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id1}}/boats/{{boat_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id1}}",
										"boats",
										"{{boat_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DEASSIGN 50boat_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id1}}/boats/{{50boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id1}}",
										"boats",
										"{{50boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - Expired Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID TOKEN: Please renew token by logging in again. \");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expired_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id2}}/boats/{{ESA_boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id2}}",
										"boats",
										"{{ESA_boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DEASSIGN ESA_boat_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id2}}/boats/{{ESA_boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id2}}",
										"boats",
										"{{ESA_boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - DEASSIGN WITH WRONG JWT MESA_boat_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: This authorized user has no relation with this boat_id.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id1}}/boats/{{MESA_boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id1}}",
										"boats",
										"{{MESA_boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - NO AUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: Unauthorized user.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id1}}/boats/{{MESA_boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id1}}",
										"boats",
										"{{MESA_boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 - NON-EXISTENT BOAT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 status code\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: No boat with this boat_id exists.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id1}}/boats/{{invalid_boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id1}}",
										"boats",
										"{{invalid_boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 - INVALID OWNER ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 status code\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: Non-existent owner_id given.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{invalid_owner_id}}/boats/{{invalid_boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{invalid_owner_id}}",
										"boats",
										"{{invalid_boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - DEASSIGN MEA_PUT_boat - RIGHT JWT, WRONG USER ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: This authorized user has no relation with this boat_id.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id1}}/boats/{{MEA_PUT_boat}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id1}}",
										"boats",
										"{{MEA_PUT_boat}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DEASSIGN PUTboat_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id1}}/boats/{{PUTboat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id1}}",
										"boats",
										"{{PUTboat_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ASSIGN",
					"item": [
						{
							"name": "401 - NO AUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: Unauthorized user.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id1}}/boats/{{MESA_boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id1}}",
										"boats",
										"{{MESA_boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - Expired Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID TOKEN: Please renew token by logging in again. \");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expired_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id1}}/boats/{{MESA_boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id1}}",
										"boats",
										"{{MESA_boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - ASSIGN PUTboat_id AN OWNER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id2}}/boats/{{PUTboat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id2}}",
										"boats",
										"{{PUTboat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - CHECK IF OWNER CHANGED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"correct owner\", function () {\r",
											"    pm.expect(pm.response.json()['owner']['id']).to.eq(pm.environment.get(\"user_id2\"));\r",
											"});\r",
											"\r",
											"pm.test(\"owner changed\", function () {\r",
											"    pm.expect(pm.response.json()['owner']['id']).to.not.eq(pm.environment.get(\"PUTboat_owner\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{PUTboat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{PUTboat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 - NON-EXISTENT BOAT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 status code\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: No boat with this boat_id exists.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id1}}/boats/{{invalid_boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id1}}",
										"boats",
										"{{invalid_boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 - INVALID OWNER ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 status code\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: This owner_id does not exist.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{invalid_owner_id}}/boats/{{invalid_boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{invalid_owner_id}}",
										"boats",
										"{{invalid_boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - CORRECT JWT, WRONG USER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"console.log(pm.response.json()[\"Error\"])\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: JWT does not match the given user_id.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id1}}/boats/{{PUTboat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id1}}",
										"boats",
										"{{PUTboat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 - ASSIGN AN ALREADY ASSIGNED BOAT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"403 status code\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"\r",
											"console.log(pm.response.json()[\"Error\"])\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: This boat already has an owner.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{app_url}}/owners/{{user_id1}}/boats/{{PUTboat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"owners",
										"{{user_id1}}",
										"boats",
										"{{PUTboat_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "DELETE",
			"item": [
				{
					"name": "DELETE boats",
					"item": [
						{
							"name": "405 - Method Not Allowed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()['Error']).to.eq('INVALID REQUEST: This method is not supported at this endpoint.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DELETE boat_id1 WITH LOADS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boat_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boat_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 - DELETE Non-Existent Boat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 status code\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: No boat with this boat_id exists.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boat_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boat_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 - VALID JWT, WRONG OWNER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"403 status code\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: This owner does not own this boat.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{filler2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{filler2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - NO AUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: Unauthorized user.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{filler1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{filler1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DELETE 50boat_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{50boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{50boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DELETE ESA_boat_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{ESA_boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{ESA_boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DELETE MESA_boat_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{MESA_boat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{MESA_boat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DELETE single_id BOAT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{single_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{single_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DELETE patch_id BOAT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{patch_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{patch_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DELETE no_owner_boat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{no_owner_boat}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{no_owner_boat}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DELETE boat_id3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boat_id3}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boat_id3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "406 - Not Acceptable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"406 status code\", function () {\r",
											"    pm.response.to.have.status(406);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq('INVALID REQUEST: Not an Acceptable Media Type.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{app_url}}/boats/{{loaded_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{loaded_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DELETE MEA_PUT boat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{MEA_PUT_boat}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{MEA_PUT_boat}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DELETE PUTboat_id - NO OWNER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{PUTboat_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{PUTboat_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DELETE loaded_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{loaded_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{loaded_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DELETE FILLER BOAT 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{filler1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{filler1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DELETE FILLER BOAT 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{filler2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{filler2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - NO EXISTING BOATS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Boat Count\", function () {\r",
											"    pm.expect(pm.response.json()['boats'].length).to.eq(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - NO USER1 BOATS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Boat Count\", function () {\r",
											"    pm.expect(pm.response.json()['boats'].length).to.eq(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - NO USER2 BOATS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Boat Count\", function () {\r",
											"    pm.expect(pm.response.json()['boats'].length).to.eq(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE loads",
					"item": [
						{
							"name": "204 - DELETE load_id1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{load_id1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{load_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DELETE load_id2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{load_id2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{load_id2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DELETE load_id3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{load_id3}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{load_id3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DELETE load_id4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{load_id4}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{load_id4}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 - DELETE Non-existent Load",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 status code\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message \", function () {\r",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"INVALID REQUEST: No load with this load_id exists.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{load_id4}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{load_id4}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DELETE pt_load1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{pt_load1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{pt_load1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DELETE pt_load2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{pt_load2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{pt_load2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - DELETE extra_load_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 status code\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{extra_load_id}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{extra_load_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - NO EXISTING LOADS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Load Count\", function () {\r",
											"    pm.expect(pm.response.json()['loads'].length).to.eq(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}